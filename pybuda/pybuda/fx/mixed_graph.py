# SPDX-FileCopyrightText: Â© 2024 Tenstorrent AI ULC

# SPDX-License-Identifier: Apache-2.0

#
# Mixed graph contains a pybuda graph, and one or more FX graphs that will be executed on the CPU. It is 
# generated by capturing a FX graph from pt2. Unsupported ops, or arguments will be dropped down to CPU.
#

from typing import Dict, List, Tuple
import torch
from loguru import logger

import pybuda
from pybuda._C.torch_device import unique_id

class MixedGraph:
    def __init__(self, module_name: str):
        self.graph = pybuda._C.graph.Graph(module_name)
        self.inputs_per_subgraph : Dict[int, List[int]] = {}
        self.outputs_per_subgraph : Dict[int, List[int]] = {}

    def capture_sample_inputs(self, inputs: List[torch.Tensor], subgraph_id: int):
        self.inputs_per_subgraph[subgraph_id] = [unique_id(t) for t in inputs]

    def capture_sample_outputs(self, outputs: List[torch.Tensor], subgraph_id: int):
        self.outputs_per_subgraph[subgraph_id] = [unique_id(t) for t in outputs]

    def get_subgraph_input(self, subgraph_id: int, input_index: int) -> int:
        return self.inputs_per_subgraph[subgraph_id][input_index]

    def get_output_index(self, uid) -> Tuple[int, int]:
        # Return the subgraph index and output index for the given uid
        for idx in self.outputs_per_subgraph:
            if uid in self.outputs_per_subgraph[idx]:
                return idx, self.outputs_per_subgraph[idx].index(uid)

        assert False, "Output not found"

